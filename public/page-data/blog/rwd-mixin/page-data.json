{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/rwd-mixin","result":{"data":{"markdownRemark":{"html":"<h2>Założenia wstępne</h2>\n<p>Aby z łatwością zrozumieć i wdrożyć to co opiszę poniżej powinieneś:</p>\n<ul>\n<li>umieć korzystać z preprocesora SASS / SCSS w stopniu podstawowym</li>\n<li>wiedzieć czym jest funkcja</li>\n<li>rozumieć działanie <code>@media-queries</code></li>\n<li>znać CSS</li>\n<li>rozumieć koncepcję RWD (Responsive Web Design)</li>\n</ul>\n<h2>Problem</h2>\n<p>RWD w tych czasach jest absolutnym standardem (a przynajmniej powinno być).\nPraktycznie każdą webową apkę trzeba w jakiś sposób zmodyfikować na większych lub mniejszych rozdzielczościach. Zdarzają się projekty, w których dość sporo kodu jest umieszczana w regułach <code>media</code>. W wielu przypadkach standardowe style są pisane przy zachowaniu naturalnego flow - od góry do dołu a następnie poszczególne klasy są nadpisywane w blokach <code>media query</code> na dole pliku.\nWygląda do w sporym uproszczeniu w taki sposób.</p>\n<deckgo-highlight-code language=\"css\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">.nav {\n    background-color: red;\n}\n.intro {\n    width: 100px;\n}\n.contact {\n    height: 200px;\n}\n.footer {\n    display: flex;\n}\n\n\n/* Poniżej nadpisujemy reguły dla urządzeń mobilnych */\n@media (max-width: 760px) {\n    .nav {\n        background-color: teal;\n    }\n    .intro {\n        width: 200px;\n    }\n    .contact {\n        height: 25px;\n    }\n    .footer {\n        display: block;\n    }\n}\n</code>\n        </deckgo-highlight-code>\n<p>Nie ma dramatu w takim odchudzonym przykładzie, jednak przy nieco większej ilości kodu zmuszało mnie do scrollowania pliku od góry do dołu setki razy co przyprawiało mnie o oczopląs. Gdyby tylko był sposób na trzymanie kodu z bloków <code>media</code> razem z daną regułą...</p>\n<h2>Mixiny</h2>\n<p>Mixiny są zdecydowanie tematem na odrębny blog post, jednak na potrzeby tego wpisu przyjmijmy do informacji, że <code>@mixin</code> jest cudownym trikiem dostarczonym przez SASS-a, który pozwala nam definiować reguły CSS, które z łatwością będziemy mogli reużywać w naszej aplikacj.</p>\n<p>Tak się składa, żę dzieki mixinom możemy ugryźć temat modyfikacji związanych z RWD w dość ciekawy sposób. Spójrz na poniższy snippet.</p>\n<deckgo-highlight-code language=\"css\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">@mixin breakpoint($point) {\n   @if $point == mobile {\n     @media (max-width: 760px) { @content ; }}\n   @else if $point == laptop {\n     @media (max-width: 1400px) { @content ; }}\n\n    /* Tutaj możesz dopisać więcej breakpointów. Tylko nie przesadź :) */\n}</code>\n        </deckgo-highlight-code>\n<p>Stworzyliśmy wyżej mixin o nazwie <code>breakpoint</code>. Wygląda on trochę jak funkcja w JS prawda? Przyjmuje on parametr o nazwie <code>$point</code>. Wewnątrz naszej funkcji mamy instrukcję <code>if</code>. Sprawdza ona jaki parametr został dostarczony na wejściu i w oparciu o te wiedzę tworzy regułę <code>media</code>, która dodatkowo w swoim bloku kodu umieszcza <code>@content</code>. Dziwne co?\nWystarczy pokazać działanie tego mixina w akcji i wszystkie kropki się połączą.</p>\n<p>Powiedzmy, że chcemy sprawić aby nasz element o klasie <code>.box</code> zmieniał kolor w zależności od tego czy jesteśmy na małym czy może nieco większym urządzaniu.</p>\n<deckgo-highlight-code language=\"css\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">.box {\n  width: 50px;\n  height: 50px;\n  background-color: red;\n  @include breakpoint(laptop){\n    background-color: pink;\n  }\n  @include breakpoint(mobile){\n    background-color: teal;\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>Stworzyliśmy wyżej regułę, która:</p>\n<ol>\n<li>Zmienia kolor tła na czerwony i zmienia rozmiary elementu</li>\n<li>Korzystając z naszego mixina wewnątrz swojego ciała zmienia zachowanie elementu na większych ekranach nadając mu różowy kolor tła.</li>\n<li>Również korzystając z mixina breakpoint zmienia tło  elementu <code>.box</code>, jednak na nieco mniejszych ekranach.</li>\n</ol>\n<p>Masz już pomysł co jest tym magicznym <code>@content</code>, o ktorym wspomniałem wyżej ?\nSą nim poszczególne style jakie wrzucamy do środka naszego mixina podczaj gdy go używamy. Biorąc pod uwagę poprzedni przykład:</p>\n<ul>\n<li><code>background-color: pink;</code> stał się <code>@content</code>-em dla <code>breakpoint(laptop)</code></li>\n<li><code>background-color: teal;</code> stał się <code>@content</code>-em dla <code>breakpoint(mobile)</code></li>\n</ul>\n<p>CodePen z przykładem znajdziesz poniżej. Pobaw się rozmiarami okna przeglądarki i zauważ, że element zachowuje się tak jak chcieliśmy.</p>\n<p><a href=\"https://codepen.io/AdamKniec/pen/OJmQZeR\" target=\"_blank\">CodePen pokazujący działanie mixina</a></p>\n<h2>Podsumowanie</h2>\n<p>Wpisem tym chciałem Ci pokazać prawdopodobnie jedno z wielu podejść do tematu RWD. Mi osobiście podoba się idea mixina, który wewnątrz reguły informuje nas jak powinien wyglądać / zachować się element na ekranie o danej rozdzielczości. Nie traktuj tego sposobu jako jedynej słusznej drogi.</p>\n<p>Na koniec małe porównanie podejścia z mixinem i z regułami <code>@media</code> na dole pliku. Oba snippety modyfikują element w taki sam sposób.</p>\n<deckgo-highlight-code language=\"css\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">/* Mixin breakpoint musi być dostępny w pliku tej reguły. Albo go tam wrzuć albo zaimportuj z innego pliku :) */\n.box {\n  width: 50px;\n  height: 50px;\n  background-color: red;\n  @include breakpoint(laptop){\n    background-color: pink;\n  }\n  @include breakpoint(mobile){\n    background-color: teal;\n  }\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"css\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">.box {\n  width: 50px;\n  height: 50px;\n  background-color: red;\n}\n\n@media (max-width: 1400px) {\n  .box {\n    background-color: pink;\n  }\n  \n}\n\n@media (max-width: 760px) {\n  .box {\n    background-color: teal;\n  }\n}</code>\n        </deckgo-highlight-code>\n<h2>Źródła</h2>\n<p><a href=\"https://responsivedesign.is/articles/helpful-sass-mixins/\" target=\"_blank\">responsivedesign.is/articles/helpful-sass-mixins/</a></p>","frontmatter":{"path":"/blog/rwd-mixin","readTime":"5","title":"RWD Mixin","author":"Adam Kniec","tags":["CSS"],"date":"2021-07-26","description":"Boli Mnie Web - RWD Mixin"}}},"pageContext":{}},"staticQueryHashes":["63159454"]}